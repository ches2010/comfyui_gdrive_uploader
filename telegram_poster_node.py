import os
import json
import logging
from PIL import Image
import numpy as np
import torch

# Telegram Bot API
from telegram import Bot

# ComfyUI imports
import folder_paths

# --- Logging Setup ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Config File Path ---
# ‚¨áÔ∏è Áªü‰∏Ä‰ΩøÁî® config.json
CONFIG_FILE = os.path.join(os.path.dirname(__file__), "config.json")

# --- Load Config ---
def load_telegram_config():
    if not os.path.exists(CONFIG_FILE):
        logger.warning(f"‚ö†Ô∏è Config file not found: {CONFIG_FILE}. Please create it with 'telegram' section.")
        return None, None
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
            telegram_config = config.get("telegram", {})
            bot_token = telegram_config.get("bot_token", "").strip()
            chat_id = telegram_config.get("chat_id", "").strip()
            if not bot_token or not chat_id:
                logger.error("‚ùå 'bot_token' or 'chat_id' missing in config.json under 'telegram' section")
                return None, None
            return bot_token, chat_id
    except Exception as e:
        logger.error(f"‚ùå Failed to load Telegram config: {e}")
        return None, None


class TelegramImagePoster:
    """
    ComfyUI Node to post generated images to a Telegram group/channel and preview them locally.
    """
    def __init__(self):
        self.output_dir = folder_paths.get_output_directory()
        self.type = "output"
        self.prefix_append = ""
        self.compress_level = 4

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "images": ("IMAGE",),
                "filename_prefix": ("STRING", {"default": "TelegramPost"}),
                "caption": ("STRING", {"default": "Generated by ComfyUI üé®", "multiline": True}),
            },
            "hidden": {
                "prompt": "PROMPT",
                "extra_pnginfo": "EXTRA_PNGINFO"
            },
        }

    RETURN_TYPES = ()
    FUNCTION = "post_and_preview"
    OUTPUT_NODE = True
    CATEGORY = "image/telegram"

    async def post_and_preview(self, images, filename_prefix="TelegramPost", caption="Generated by ComfyUI üé®", prompt=None, extra_pnginfo=None):
        logger.info("üì∑ Starting Telegram image posting process...")

        bot_token, chat_id = load_telegram_config()
        if not bot_token or not chat_id:
            logger.error("üõë Telegram config invalid or missing. Skipping upload.")
            return self._return_preview(images, filename_prefix, prompt, extra_pnginfo)

        bot = Bot(token=bot_token)
        results = []

        for batch_number, image in enumerate(images):
            i = 255. * image.cpu().numpy()
            img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))
            file = f"{filename_prefix}_{batch_number:05}.png"
            local_file_path = os.path.join(self.output_dir, file)

            # Save with metadata
            try:
                from PIL.PngImagePlugin import PngInfo
                metadata = PngInfo()
                if prompt:
                    metadata.add_text("prompt", json.dumps(prompt))
                if extra_pnginfo:
                    for x in extra_pnginfo:
                        metadata.add_text(x, json.dumps(extra_pnginfo[x]))
                img.save(local_file_path, pnginfo=metadata, compress_level=self.compress_level)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not save with metadata: {e}")
                img.save(local_file_path, compress_level=self.compress_level)

            # Post to Telegram
            try:
                with open(local_file_path, 'rb') as photo_file:
                    await bot.send_photo(chat_id=chat_id, photo=photo_file, caption=caption)
                logger.info(f"‚úÖ Posted to Telegram: {file}")
            except Exception as e:
                logger.error(f"‚ùå Failed to post {file} to Telegram: {e}")

            results.append({
                "filename": file,
                "subfolder": "",
                "type": self.type
            })

        return {"ui": {"images": results}}

    def _return_preview(self, images, filename_prefix, prompt, extra_pnginfo):
        results = []
        for batch_number, image in enumerate(images):
            i = 255. * image.cpu().numpy()
            img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))
            file = f"{filename_prefix}_{batch_number:05}_local.png"
            local_file_path = os.path.join(self.output_dir, file)

            try:
                from PIL.PngImagePlugin import PngInfo
                metadata = PngInfo()
                if prompt:
                    metadata.add_text("prompt", json.dumps(prompt))
                if extra_pnginfo:
                    for x in extra_pnginfo:
                        metadata.add_text(x, json.dumps(extra_pnginfo[x]))
                img.save(local_file_path, pnginfo=metadata, compress_level=self.compress_level)
            except:
                img.save(local_file_path, compress_level=self.compress_level)

            results.append({
                "filename": file,
                "subfolder": "",
                "type": self.type
            })
        return {"ui": {"images": results}}  # UI ËøîÂõû‰∏çÈúÄË¶Å await


NODE_CLASS_MAPPINGS = {
    "TelegramImagePoster": TelegramImagePoster
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "TelegramImagePoster": "üì§ Post Image to Telegram"
}
